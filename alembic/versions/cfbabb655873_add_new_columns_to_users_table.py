"""Add new columns to users table

Revision ID: cfbabb655873
Revises: 
Create Date: 2025-10-15 23:22:35.148330

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cfbabb655873'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('favorites')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_nickname'), table_name='users')
    op.drop_index(op.f('ix_users_userId'), table_name='users')
    op.drop_table('users')
    op.drop_table('user_consents')
    op.drop_index(op.f('ix_email_verifications_token'), table_name='email_verifications')
    op.drop_index(op.f('ix_email_verifications_user_id'), table_name='email_verifications')
    op.drop_table('email_verifications')
    op.drop_index(op.f('ix_postings_sellerId'), table_name='postings')
    op.drop_table('postings')
    op.drop_index(op.f('ix_posting_images_posting_id'), table_name='posting_images')
    op.drop_table('posting_images')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('posting_images',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('posting_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ord', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['posting_id'], ['postings.postingId'], name=op.f('posting_images_posting_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('posting_images_pkey'))
    )
    op.create_index(op.f('ix_posting_images_posting_id'), 'posting_images', ['posting_id'], unique=False)
    op.create_table('postings',
    sa.Column('postingId', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('sellerId', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('viewCount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('likeCount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('chatCount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('postingId', name=op.f('postings_pkey'))
    )
    op.create_index(op.f('ix_postings_sellerId'), 'postings', ['sellerId'], unique=False)
    op.create_table('email_verifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.userId'], name=op.f('email_verifications_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('email_verifications_pkey'))
    )
    op.create_index(op.f('ix_email_verifications_user_id'), 'email_verifications', ['user_id'], unique=False)
    op.create_index(op.f('ix_email_verifications_token'), 'email_verifications', ['token'], unique=True)
    op.create_table('user_consents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tos', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('privacy', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('marketing', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('agreed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.userId'], name=op.f('user_consents_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_consents_pkey'))
    )
    op.create_table('users',
    sa.Column('userId', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('nickname', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('birth_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('email_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('userId', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_userId'), 'users', ['userId'], unique=False)
    op.create_index(op.f('ix_users_nickname'), 'users', ['nickname'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('favorites',
    sa.Column('userId', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('postingId', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('userId', 'postingId', name=op.f('favorites_pkey'))
    )
    # ### end Alembic commands ###
